<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.jboss.quickstarts.wfk</groupId>
	<artifactId>jboss-kitchensink-angularjs</artifactId>
	<version>2.4.0.Final</version>
	<packaging>war</packaging>
	<name>JBoss WFK Quickstart: kitchensink-angularjs</name>
	<description>A partida Java EE 6 webapp projeto para uso em JBoss EAP 6, gerado a partir do arquétipo jboss-JavaEE6-webapp, usando AngularJS para a view</description>

	<url>http://jboss.org/jbossas</url>
	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<distribution>repo</distribution>
			<url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
		</license>
	</licenses>

	<properties>
		<!-- Declarar explicitamente a codificação de fonte elimina a seguinte mensagem: -->
		<!-- [WARNING] O uso de codificação plataforma (UTF-8, na verdade) para copiar recursos filtrados, ou seja, de construção é dependente de plataforma! -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- JBoss dependency versions -->
		<version.jboss.maven.plugin>7.4.Final</version.jboss.maven.plugin>

		<!-- Definir a versão dos BOMs JBoss que deseja importar. Os JBoss BOMs especificar pilhas testadas. -->
		<version.jboss.bom.eap>1.0.4.Final-redhat-9</version.jboss.bom.eap>

		<!-- other plugin versions -->
		<version.surefire.plugin>2.10</version.surefire.plugin>
		<version.war.plugin>2.1.1</version.war.plugin>

		<!-- maven-compiler-plugin -->
		<maven.compiler.target>1.6</maven.compiler.target>
		<maven.compiler.source>1.6</maven.compiler.source>

		<!--Propriedade automaticamente criado por QSTools para org.jboss.bom.wfk: jboss-javaee-6.0-com-ferramentas BOM -->
		<version.jboss.bom.wfk>2.4.0-redhat-2</version.jboss.bom.wfk>
	</properties>


	<repositories>
		<repository>
			<id>jboss-ga-repository</id>
			<url>http://maven.repository.redhat.com/techpreview/all</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>jboss-earlyaccess-repository</id>
			<url>http://maven.repository.redhat.com/earlyaccess/all/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>
	
	<pluginRepositories>
		<pluginRepository>
			<id>jboss-ga-plugin-repository</id>
			<url>http://maven.repository.redhat.com/techpreview/all</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
		<pluginRepository>
			<id>jboss-earlyaccess-plugin-repository</id>
			<url>http://maven.repository.redhat.com/earlyaccess/all/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>


	<dependencyManagement>
		<dependencies>
			<!-- JBoss distribui um conjunto completo de APIs do Java EE 6, incluindo uma lista de materiais (BOM). Um BOM especifica as versões de uma "pilha" (ou um conjunto) de artefatos. Nós usamos isso aqui 
				para que nós sempre obter as versões corretas dos artefatos. Aqui usamos a pilha jboss-javaee-6.0-com-ferramentas (você pode ler isso como a pilha JBoss das APIs do Java EE 6, com algumas ferramentas extras 
				para o seu projeto, como Arquillian para testes) eo jboss-javaee- 6.0-com-hibernate pilha você pode ler isso como a pilha JBoss das APIs do Java EE 6, com extras a partir da família Hibernate de projetos) -->
			<dependency>
				<groupId>org.jboss.bom.wfk</groupId>
				<artifactId>jboss-javaee-6.0-with-tools</artifactId>
				<version>${version.jboss.bom.wfk}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.jboss.bom</groupId>
				<artifactId>jboss-javaee-6.0-with-hibernate</artifactId>
				<version>${version.jboss.bom.eap}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- Primeiro declarar as APIs que dependemos e necessidade de compilação. Todos eles são fornecidos pelo JBoss EAP 6 -->

		<!-- Primeiro declarar as APIs que dependemos e necessidade de compilação. Todos eles são fornecidos pelo JBoss EAP 6 -->
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Importe o API Anotações comuns (JSR-250), usamos escopo fornecido como o API está incluída no JBoss EAP 6 -->
		<dependency>
			<groupId>org.jboss.spec.javax.annotation</groupId>
			<artifactId>jboss-annotations-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JAX-RS API, we use provided scope as the API is included in JBoss EAP 6 -->
		<dependency>
			<groupId>org.jboss.spec.javax.ws.rs</groupId>
			<artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JPA API, we use provided scope as the API is included in JBoss EAP 6 -->
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.0-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the EJB API, we use provided scope as the API is included in JBoss EAP 6 -->
		<dependency>
			<groupId>org.jboss.spec.javax.ejb</groupId>
			<artifactId>jboss-ejb-api_3.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- JSR-303 (Bean Validation) Implementation -->
		<!-- Provides portable constraints such as @Email -->
		<!-- Hibernate Validator is shipped in JBoss EAP 6 -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Now we declare any tools needed -->

		<!-- Annotation processor to generate the JPA 2.0 metamodel classes for typesafe criteria queries -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jpamodelgen</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Annotation processor that raising compilation errors whenever constraint annotations are incorrectly used. -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator-annotation-processor</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Needed for running tests (you may also use TestNG) -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Opcional, mas altamente recomendado -->
		<!-- Arquillian permite testar código corporativo, como EJBs e transacional (JTA) JPA de JUnit / TestNG -->
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.arquillian.protocol</groupId>
			<artifactId>arquillian-protocol-servlet</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<!-- Maven will append the version to the finalName (which is the name given to the generated war, and hence the context root) -->
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>${version.war.plugin}</version>
				<configuration>
					<!-- O Java EE 6 não exigem web.xml, Maven precisa apanhar! -->
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
			<!-- O plugin JBoss AS implanta sua war de um recipiente JBoss AS locais -->
			<!-- To use, run: mvn package jboss-as:deploy -->
			<plugin>
				<groupId>org.jboss.as.plugins</groupId>
				<artifactId>jboss-as-maven-plugin</artifactId>
				<version>${version.jboss.maven.plugin}</version>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<!-- O perfil padrão pula todos os testes, mas você pode ajustá-lo para executar apenas os testes de unidade com base em um padrão personalizado -->
			<!-- Perfis separados são fornecidos para a execução de todos os testes, incluindo testes Arquillian que executam no contêiner especificado -->
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${version.surefire.plugin}</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- Um perfil de testes Arquillian opcional que executa testes em sua instância JBoss AS -->
			<!-- Esse perfil irá iniciar uma nova instância JBoss AS, e executar o teste, desligando-o quando feito -->
			<!-- Run with: mvn clean test -Parq-jbossas-managed -->
			<id>arq-jbossas-managed</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.as</groupId>
					<artifactId>jboss-as-arquillian-container-managed</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<!-- Um perfil de testes Arquillian opcional que executa testes em uma instância JBoss AS remoto -->
			<!-- Run with: mvn clean test -Parq-jbossas-remote -->
			<id>arq-jbossas-remote</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.as</groupId>
					<artifactId>jboss-as-arquillian-container-remote</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<!-- Quando construído em OpenShift o perfil 'OpenShift' será usado ao invocar mvn. -->
			<!-- Utilize este perfil para qualquer OpenShift personalização específica a sua aplicação terá. -->
			<!-- Por padrão que é colocar o arquivo resultante para a pasta 'implementações'. -->
			<!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
			<id>openshift</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-war-plugin</artifactId>
						<version>${version.war.plugin}</version>
						<configuration>
							<outputDirectory>deployments</outputDirectory>
							<warName>ROOT</warName>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>
</project>
